package main

// test ole array

import (
	"fmt"
	"syscall"
	_ "unicode/utf16"
	"unsafe"

	_ "golang.org/x/sys/windows"

	ole "github.com/hspan/go-ole"
)

type VT uint16

const (
	VT_BSTR   VT = 0x8
	E_NOTIMPL    = 0x80004001
)

var (
	modoleaut32, _               = syscall.LoadDLL("oleaut32.dll")
	procSafeArrayCreateVector, _ = modoleaut32.FindProc("SafeArrayCreateVector")
	procSafeArrayPutElement, _   = modoleaut32.FindProc("SafeArrayPutElement")
)

func main() {
	arr := []int32{0, 1, 2}
	fmt.Println("testing...", arr)
	fmt.Println(ole.CC_CDECL)

	cvtarr := safeArrayFromInt32Slice(arr)
	fmt.Println(cvtarr)

}

// safeArrayCreateVector creates SafeArray.
//
// AKA: SafeArrayCreateVector in Windows API.
func safeArrayCreateVector(variantType ole.VT, lowerBound int32, length uint32) (safearray *ole.SafeArray, err error) {
	sa, _, err := procSafeArrayCreateVector.Call(
		uintptr(variantType),
		uintptr(lowerBound),
		uintptr(length))
	safearray = (*ole.SafeArray)(unsafe.Pointer(sa))
	return
}

// convertHresultToError converts syscall to error, if call is unsuccessful.
func convertHresultToError(hr uintptr, r2 uintptr, ignore error) (err error) {
	if hr != 0 {
		err = ole.NewError(hr)
	}
	return
}

// safeArrayPutElement stores the data element at the specified location in the
// array.
//
// AKA: SafeArrayPutElement in Windows API.
func safeArrayPutElement(safearray *ole.SafeArray, index int64, element uintptr) (err error) {
	err = convertHresultToError(
		procSafeArrayPutElement.Call(
			uintptr(unsafe.Pointer(safearray)),
			uintptr(unsafe.Pointer(&index)),
			uintptr(unsafe.Pointer(element))))
	return
}

func safeArrayFromInt32Slice(slice []int32) *ole.SafeArray {
	array, _ := safeArrayCreateVector(ole.VT_I4, 0, uint32(len(slice)))

	if array == nil {
		panic("Could not convert []int32 to SAFEARRAY")
	}
	// SysAllocStringLen(s)
	for i, v := range slice {
		safeArrayPutElement(array, int64(i), uintptr(unsafe.Pointer(&v)))
	}
	return array
}

// func SysAllocStringLen(v string) (ss *int16) {
// 	utf16 := utf16.Encode([]rune(v + "\x00"))
// 	ptr := &utf16[0]

// 	pss, _, _ := procSysAllocStringLen.Call(uintptr(unsafe.Pointer(ptr)), uintptr(len(utf16)-1))
// 	ss = (*int16)(unsafe.Pointer(pss))
// 	return
// }

type SafeArray struct {
	Dimensions   uint16
	FeaturesFlag uint16
	ElementsSize uint32
	LocksAmount  uint32
	Data         uint32
	Bounds       [16]byte
}

type OleError struct {
	hr          uintptr
	description string
	subError    error
}

// NewError creates new error with HResult.
func NewError(hr uintptr) *OleError {
	return &OleError{hr: hr}
}
